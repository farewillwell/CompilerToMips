.data
str_0: .asciiz "\n"
str_1: .asciiz "\n"

.text

# enter main
jal main


# leave main
j END

isPrime:
move $t3, $a1
isPrimeb0:

# move %V11, 2
li $t0, 2
move $t4, $t0

# br label %b1
j isPrimeb1

isPrimeb1:

# %V5 = icmp slt i32 %V11, %P_0
slt $t5, $t4, $t3

# br i1 %V5, label %b2, label %b4
bne $t5, $zero, isPrimeb2
beq $t5, $zero, isPrimeb4
isPrimeb2:

# %V8 = srem i32 %P_0, %V11
div $t3, $t4
mfhi $t5

# %V9 = icmp eq i32 %V8, 0
li $t1, 0
seq $t5, $t5, $t1

# br i1 %V9, label %b5, label %b6
bne $t5, $zero, isPrimeb5
beq $t5, $zero, isPrimeb6
isPrimeb5:

# ret i32 0
li $v0, 0
jr $ra

isPrimeb6:

# %V11 = add i32 %V11, 1
li $t1, 1
addu $t4, $t4, $t1

# br label %b1
j isPrimeb1

isPrimeb4:

# ret i32 1
li $v0, 1
jr $ra

main:
mainb0:

# %V3 = call i32 @F_isPrime (i32 30)
sw $ra, -12($sp)
li $t0, 30
move $a1, $t0
addi $sp, $sp, -12
jal isPrime

addi $sp, $sp, 12
lw $ra, -12($sp)
move $t3, $v0

# call void @putint(i32 %V3)
move $a0, $t3
li $v0, 1
syscall

# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_0, i32 0, i32 0))
la $a0, str_0
li $v0, 4
syscall

# %V5 = call i32 @F_isPrime (i32 31)
sw $ra, -16($sp)
sw $t3, -4($sp)
li $t0, 31
move $a1, $t0
addi $sp, $sp, -16
jal isPrime

addi $sp, $sp, 16
lw $ra, -16($sp)
lw $t3, -4($sp)
move $t3, $v0

# call void @putint(i32 %V5)
move $a0, $t3
li $v0, 1
syscall

# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_1, i32 0, i32 0))
la $a0, str_1
li $v0, 4
syscall

# ret i32 0
li $v0, 0
jr $ra

END:
li $v0, 10
syscall

