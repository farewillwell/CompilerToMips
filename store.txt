declare i32 @getint()
declare void @putch(i32)
declare void @putint(i32)
declare void @putstr(i8*)

@str_0 = constant [2 x i8] c"
\00"
@str_1 = constant [2 x i8] c"
\00"
@str_2 = constant [2 x i8] c"
\00"
@str_3 = constant [3 x i8] c"t:\00"
@str_4 = constant [2 x i8] c"
\00"
define dso_local i32 @F_isPrime (i32 %P_0){
b1:
  %V5 = icmp slt i32 %V11, %P_0
  br i1 %V5, label %b2, label %b4
b2:
  %V8 = srem i32 %P_0, %V11
  %V9 = icmp eq i32 %V8, 0
  br i1 %V9, label %b5, label %b6
b5:
  ret i32 0
b6:
  %V11 = add i32 %V11, 1
  br label %b1
b4:
  ret i32 1
}
define dso_local void @F_check_group (i32* %P_0){
b1:
  %V4 = icmp slt i32 %V14, 2
  br i1 %V4, label %b2, label %b4
b2:
  %V8 = getelementptr inbounds i32,i32* %P_0, i32 %V14
  %V9 = load i32, i32* %V8
  %V11 = call i32 @F_isPrime (i32 %V9)
  call void @putint(i32 %V11)
  call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_0, i32 0, i32 0))
  %V14 = add i32 %V14, 1
  br label %b1
b4:
  ret void
}
define dso_local i32 @F_test ([2 x i32]* %P_0){
b0:
  %V3 = getelementptr inbounds [2 x i32],[2 x i32]* %P_0, i32 0
  %V4 = getelementptr inbounds [2 x i32], [2 x i32]* %V3,  i32 0 ,i32 1
  %V5 = load i32, i32* %V4
  %V6 = icmp eq i32 %V5, 0
  br i1 %V6, label %b2, label %b2
b2:
  ret i32 0
}
define dso_local i32 @main() {
b0:
  %V3 = call i32 @F_isPrime (i32 30)
  call void @putint(i32 %V3)
  call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_1, i32 0, i32 0))
  %V5 = call i32 @F_isPrime (i32 31)
  call void @putint(i32 %V5)
  call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_2, i32 0, i32 0))
  %V6 = alloca [3 x [2 x i32]]
  %V7 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %V6,  i32 0 ,i32 0
  %V8 = getelementptr inbounds [2 x i32], [2 x i32]* %V7,  i32 0 ,i32 0
  store i32 111 , i32* %V8
  %V9 = getelementptr inbounds [2 x i32], [2 x i32]* %V7,  i32 0 ,i32 1
  store i32 2222 , i32* %V9
  %V10 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %V6,  i32 0 ,i32 1
  %V11 = getelementptr inbounds [2 x i32], [2 x i32]* %V10,  i32 0 ,i32 0
  store i32 3 , i32* %V11
  %V12 = getelementptr inbounds [2 x i32], [2 x i32]* %V10,  i32 0 ,i32 1
  store i32 4 , i32* %V12
  %V13 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %V6,  i32 0 ,i32 2
  %V14 = getelementptr inbounds [2 x i32], [2 x i32]* %V13,  i32 0 ,i32 0
  store i32 5 , i32* %V14
  %V15 = getelementptr inbounds [2 x i32], [2 x i32]* %V13,  i32 0 ,i32 1
  store i32 6 , i32* %V15
  %V16 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %V6,  i32 0 ,i32 0
  %V17 = getelementptr inbounds [2 x i32], [2 x i32]* %V16,  i32 0 ,i32 0
  call void @F_check_group (i32* %V17)
  %V18 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %V6,  i32 0 ,i32 1
  %V19 = getelementptr inbounds [2 x i32], [2 x i32]* %V18,  i32 0 ,i32 0
  call void @F_check_group (i32* %V19)
  %V20 = getelementptr inbounds [3 x [2 x i32]], [3 x [2 x i32]]* %V6,  i32 0 ,i32 2
  %V21 = getelementptr inbounds [2 x i32], [2 x i32]* %V20,  i32 0 ,i32 0
  call void @F_check_group (i32* %V21)
  br label %b1
b1:
  %V24 = icmp sgt i32 %V28, 0
  br i1 %V24, label %b2, label %b4
b2:
  %V26 = icmp slt i32 %V28, 10
  br i1 %V26, label %b4, label %b6
b6:
  %V28 = add i32 %V28, 1
  br label %b1
b4:
  call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_3, i32 0, i32 0))
  call void @putint(i32 %V28)
  call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_4, i32 0, i32 0))
  ret i32 0
}

