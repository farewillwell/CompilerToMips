.data
g1 : .word 10
g2 : .word 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
str_0: .asciiz ", "
str_1: .asciiz "\n"
str_2: .asciiz ", "
str_3: .asciiz ", "
str_4: .asciiz "\n"

.text

# enter main
jal main


# leave main
j END

fib:
move $v1, $a1
fibb0:

# %V3 = icmp eq i32 %P_0, 1
li $t1, 1
seq $t3, $v1, $t1

# br i1 %V3, label %b1, label %b2
bne $t3, $zero, fibb1
beq $t3, $zero, fibb2
fibb1:

# ret i32 1
li $v0, 1
jr $ra

fibb2:

# %V5 = icmp eq i32 %P_0, 2
li $t1, 2
seq $t3, $v1, $t1

# br i1 %V5, label %b3, label %b4
bne $t3, $zero, fibb3
beq $t3, $zero, fibb4
fibb3:

# ret i32 2
li $v0, 2
jr $ra

fibb4:

# %V7 = sub i32 %P_0, 1
li $t1, 1
subu $t3, $v1, $t1

# %V8 = call i32 @F_fib (i32 %V7)
sw $ra, -36($sp)
sw $v1, -4($sp)
sw $t3, -16($sp)
move $a1, $t3
addi $sp, $sp, -36
jal fib

addi $sp, $sp, 36
lw $ra, -36($sp)
lw $v1, -4($sp)
lw $t3, -16($sp)
move $t3, $v0

# %V10 = sub i32 %P_0, 2
li $t1, 2
subu $v1, $v1, $t1

# %V11 = call i32 @F_fib (i32 %V10)
sw $ra, -40($sp)
sw $v1, -24($sp)
sw $t3, -20($sp)
move $a1, $v1
addi $sp, $sp, -40
jal fib

addi $sp, $sp, 40
lw $ra, -40($sp)
lw $v1, -24($sp)
lw $t3, -20($sp)
move $v1, $v0

# %V12 = add i32 %V8, %V11
addu $v1, $t3, $v1

# ret i32 %V12
move $v0, $v1
jr $ra

main:
mainb0:

# %V5 = call i32 @getint()
li $v0, 5
syscall
move $v1, $v0

# %V6 = call i32 @getint()
li $v0, 5
syscall
move $t3, $v0

# %V9 = mul i32 %V5, %V6
mult $v1, $t3
mflo $v1

# %V10 = sub i32 0, %V9
li $t0, 0
subu $v1, $t0, $v1

# %V11 = call i32 @F_fib (i32 4)
sw $ra, -276($sp)
sw $v1, -16($sp)
sw $t3, -8($sp)
li $t0, 4
move $a1, $t0
addi $sp, $sp, -276
jal fib

addi $sp, $sp, 276
lw $ra, -276($sp)
lw $v1, -16($sp)
lw $t3, -8($sp)
move $t3, $v0

# %V12 = mul i32 %V10, %V11
mult $v1, $t3
mflo $v1

# %V13 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 1
la $t0, g2
addi $t3, $t0, 4

# %V14 = load i32, i32* %V13
lw $t3, 0($t3)

# %V15 = mul i32 %V14, 1
sll $t2, $t3, 0
move $t3, $t2

# %V16 = add i32 %V12, 0
li $t1, 0
addu $v1, $v1, $t1

# %V17 = add i32 %V16, %V15
addu $v1, $v1, $t3

# %V18 = sub i32 %V17, 0
li $t1, 0
subu $v1, $v1, $t1

# %V19 = mul i32 %V18, 5
addu $t2, $zero, $zero
addu $t2, $v1, $t2
sll $t1, $v1, 2
addu $t2, $t1, $t2
move $v1, $t2

# %V20 = call i32 @F_fib (i32 5)
sw $ra, -280($sp)
sw $v1, -52($sp)
sw $t3, -36($sp)
li $t0, 5
move $a1, $t0
addi $sp, $sp, -280
jal fib

addi $sp, $sp, 280
lw $ra, -280($sp)
lw $v1, -52($sp)
lw $t3, -36($sp)
move $t3, $v0

# %V21 = add i32 %V20, 2
li $t1, 2
addu $t3, $t3, $t1

# %V22 = call i32 @F_fib (i32 %V21)
sw $ra, -284($sp)
sw $v1, -52($sp)
sw $t3, -60($sp)
move $a1, $t3
addi $sp, $sp, -284
jal fib

addi $sp, $sp, 284
lw $ra, -284($sp)
lw $v1, -52($sp)
lw $t3, -60($sp)
move $t3, $v0

# %V28 = sub i32 1197, %V22
li $t0, 1197
subu $t3, $t0, $t3

# %V29 = add i32 %V28, -10091
li $t1, -10091
addu $t3, $t3, $t1

# move %V115, %V19
move $t5, $v1

# br label %b1
j mainb1

mainb1:

# %V32 = icmp slt i32 %V115, 100
li $t1, 100
slt $v1, $t5, $t1

# br i1 %V32, label %b2, label %b4
bne $v1, $zero, mainb2
beq $v1, $zero, mainb4
mainb2:

# %V33 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 0
la $t0, g2
addi $v1, $t0, 0

# %V34 = load i32, i32* %V33
lw $v1, 0($v1)

# %V38 = add i32 %V34, 36
li $t1, 36
addu $v1, $v1, $t1

# %V39 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 0
la $t0, g2
addi $t4, $t0, 0

# store i32 %V38 , i32* %V39
sw $v1, 0($t4)

# %V40 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 1
la $t0, g2
addi $v1, $t0, 4

# %V41 = load i32, i32* %V40
lw $v1, 0($v1)

# %V45 = add i32 %V41, 36
li $t1, 36
addu $v1, $v1, $t1

# %V46 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 1
la $t0, g2
addi $t4, $t0, 4

# store i32 %V45 , i32* %V46
sw $v1, 0($t4)

# %V47 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 2
la $t0, g2
addi $v1, $t0, 8

# %V48 = load i32, i32* %V47
lw $v1, 0($v1)

# %V52 = add i32 %V48, 36
li $t1, 36
addu $v1, $v1, $t1

# %V53 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 2
la $t0, g2
addi $t4, $t0, 8

# store i32 %V52 , i32* %V53
sw $v1, 0($t4)

# %V54 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 3
la $t0, g2
addi $v1, $t0, 12

# %V55 = load i32, i32* %V54
lw $v1, 0($v1)

# %V59 = add i32 %V55, 36
li $t1, 36
addu $v1, $v1, $t1

# %V60 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 3
la $t0, g2
addi $t4, $t0, 12

# store i32 %V59 , i32* %V60
sw $v1, 0($t4)

# %V61 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 4
la $t0, g2
addi $v1, $t0, 16

# %V62 = load i32, i32* %V61
lw $v1, 0($v1)

# %V66 = add i32 %V62, 36
li $t1, 36
addu $v1, $v1, $t1

# %V67 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 4
la $t0, g2
addi $t4, $t0, 16

# store i32 %V66 , i32* %V67
sw $v1, 0($t4)

# %V68 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 5
la $t0, g2
addi $v1, $t0, 20

# %V69 = load i32, i32* %V68
lw $v1, 0($v1)

# %V73 = add i32 %V69, 36
li $t1, 36
addu $v1, $v1, $t1

# %V74 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 5
la $t0, g2
addi $t4, $t0, 20

# store i32 %V73 , i32* %V74
sw $v1, 0($t4)

# %V75 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 6
la $t0, g2
addi $v1, $t0, 24

# %V76 = load i32, i32* %V75
lw $v1, 0($v1)

# %V80 = add i32 %V76, 36
li $t1, 36
addu $v1, $v1, $t1

# %V81 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 6
la $t0, g2
addi $t4, $t0, 24

# store i32 %V80 , i32* %V81
sw $v1, 0($t4)

# %V82 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 7
la $t0, g2
addi $v1, $t0, 28

# %V83 = load i32, i32* %V82
lw $v1, 0($v1)

# %V87 = add i32 %V83, 36
li $t1, 36
addu $v1, $v1, $t1

# %V88 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 7
la $t0, g2
addi $t4, $t0, 28

# store i32 %V87 , i32* %V88
sw $v1, 0($t4)

# %V89 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 8
la $t0, g2
addi $v1, $t0, 32

# %V90 = load i32, i32* %V89
lw $v1, 0($v1)

# %V94 = add i32 %V90, 36
li $t1, 36
addu $v1, $v1, $t1

# %V95 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 8
la $t0, g2
addi $t4, $t0, 32

# store i32 %V94 , i32* %V95
sw $v1, 0($t4)

# %V96 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 9
la $t0, g2
addi $v1, $t0, 36

# %V97 = load i32, i32* %V96
lw $v1, 0($v1)

# %V101 = add i32 %V97, 36
li $t1, 36
addu $v1, $v1, $t1

# %V102 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 9
la $t0, g2
addi $t4, $t0, 36

# store i32 %V101 , i32* %V102
sw $v1, 0($t4)

# br label %b3
j mainb3

mainb3:

# %V104 = add i32 %V115, 1
li $t1, 1
addu $v1, $t5, $t1

# move %V115, %V104
move $t5, $v1

# br label %b1
j mainb1

mainb4:

# move %V116, 0
li $t0, 0
move $t6, $t0

# br label %b5
j mainb5

mainb5:

# %V106 = icmp slt i32 %V116, 10
li $t1, 10
slt $v1, $t6, $t1

# br i1 %V106, label %b6, label %b8
bne $v1, $zero, mainb6
beq $v1, $zero, mainb8
mainb6:

# %V108 = getelementptr inbounds [10 x i32], [10 x i32]* @G_a,  i32 0 ,i32 %V116
la $t0, g2
sll $t1, $t6, 2
addu $v1, $t1, $t0

# %V109 = load i32, i32* %V108
lw $v1, 0($v1)

# call void @putint(i32 %V109)
move $a0, $v1
li $v0, 1
syscall

# call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_0, i32 0, i32 0))
la $a0, str_0
li $v0, 4
syscall

# %V111 = add i32 %V116, 1
li $t1, 1
addu $v1, $t6, $t1

# br label %b7
j mainb7

mainb7:

# move %V116, %V111
move $t6, $v1

# br label %b5
j mainb5

mainb8:

# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_1, i32 0, i32 0))
la $a0, str_1
li $v0, 4
syscall

# call void @putint(i32 %V116)
move $a0, $t6
li $v0, 1
syscall

# call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_2, i32 0, i32 0))
la $a0, str_2
li $v0, 4
syscall

# call void @putint(i32 %V29)
move $a0, $t3
li $v0, 1
syscall

# call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_3, i32 0, i32 0))
la $a0, str_3
li $v0, 4
syscall

# call void @putint(i32 -6)
li $a0, -6
li $v0, 1
syscall

# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str_4, i32 0, i32 0))
la $a0, str_4
li $v0, 4
syscall

# ret i32 0
li $v0, 0
jr $ra

END:
li $v0, 10
syscall

