declare i32 @getint()
declare void @putch(i32)
declare void @putint(i32)
declare void @putstr(i8*)

@G_next = dso_local global [4 x [2 x i32]] [[2 x i32] [i32 1,i32 0],[2 x i32] [i32 0,i32 -1],[2 x i32] [i32 -1,i32 0],[2 x i32] [i32 0,i32 1]]

@G_len = dso_local constant i32 3

@G_next1 = dso_local constant [4 x [2 x i32]] [[2 x i32] [i32 1,i32 0],[2 x i32] [i32 0,i32 -1],[2 x i32] [i32 -1,i32 0],[2 x i32] [i32 0,i32 1]]

@G_xxx = dso_local constant [2 x i32] [i32 1,i32 2]

@G_ans = dso_local global i32 0

@G_arr = dso_local global [2 x i32] [i32 3,i32 1]

@str_0 = constant [1 x i8] c"\00"
@str_1 = constant [3 x i8] c"\n\00"
@str_2 = constant [7 x i8] c"Hello \00"
@str_3 = constant [3 x i8] c"\n\00"
@str_4 = constant [1 x i8] c"\00"
@str_5 = constant [3 x i8] c"\n\00"
@str_6 = constant [1 x i8] c"\00"
@str_7 = constant [3 x i8] c"\n\00"
@str_8 = constant [14 x i8] c"judgeB 2,3 = \00"
@str_9 = constant [3 x i8] c"\n\00"
define dso_local i32 @F_getDif3N (i32 %P_0,i32 %P_1){
b0:
  %V1 = alloca i32
  store i32 %P_0 , i32* %V1
  %V2 = alloca i32
  store i32 %P_1 , i32* %V2
  %V3 = alloca i32
  store i32 1 , i32* %V3
  %V4 = alloca i32
  store i32 1 , i32* %V4
  %V5 = alloca i32
  store i32 1 , i32* %V5
  %V6 = alloca i32
  store i32 0 , i32* %V6
  %V7 = alloca [2 x i32]
  %V8 = getelementptr inbounds [2 x i32], [2 x i32]* %V7,  i32 0 ,i32 0
  store i32 1 , i32* %V8
  %V9 = getelementptr inbounds [2 x i32], [2 x i32]* %V7,  i32 0 ,i32 1
  store i32 2 , i32* %V9
  br label %b1
b1:
  %V10 = load i32, i32* %V3
  %V11 = icmp sle i32 %V10, 3
  br i1 %V11, label %b2, label %b4
b2:
  store i32 1 , i32* %V4
  br label %b5
b5:
  %V12 = load i32, i32* %V4
  %V13 = icmp sle i32 %V12, 3
  br i1 %V13, label %b6, label %b8
b6:
  store i32 1 , i32* %V5
  br label %b9
b9:
  %V14 = load i32, i32* %V5
  %V15 = icmp sle i32 %V14, 3
  br i1 %V15, label %b10, label %b12
b10:
  %V16 = load i32, i32* %V3
  %V17 = load i32, i32* %V4
  %V18 = icmp ne i32 %V16, %V17
  br i1 %V18, label %b15, label %b14
b15:
  %V19 = load i32, i32* %V3
  %V20 = load i32, i32* %V5
  %V21 = icmp ne i32 %V19, %V20
  br i1 %V21, label %b16, label %b14
b16:
  %V22 = load i32, i32* %V4
  %V23 = load i32, i32* %V5
  %V24 = icmp ne i32 %V22, %V23
  br i1 %V24, label %b13, label %b14
b13:
  %V25 = load i32, i32* %V6
  %V26 = add i32 %V25, 1
  store i32 %V26 , i32* %V6
  br label %b14
b14:
  %V27 = load i32, i32* %V5
  %V28 = add i32 %V27, 1
  store i32 %V28 , i32* %V5
  br label %b11
b11:
  br label %b9
b12:
  %V29 = load i32, i32* %V4
  %V30 = add i32 %V29, 1
  store i32 %V30 , i32* %V4
  br label %b7
b7:
  br label %b5
b8:
  %V31 = load i32, i32* %V3
  %V32 = add i32 %V31, 1
  store i32 %V32 , i32* %V3
  br label %b3
b3:
  br label %b1
b4:
  %V33 = load i32, i32* %V6
  ret i32 %V33
}
define dso_local i32 @F_judgeB (i32 %P_0,i32 %P_1){
b0:
  %V1 = alloca i32
  store i32 %P_0 , i32* %V1
  %V2 = alloca i32
  store i32 %P_1 , i32* %V2
  %V3 = load i32, i32* %V1
  %V4 = load i32, i32* %V2
  %V5 = icmp sle i32 %V3, %V4
  br i1 %V5, label %b1, label %b2
b1:
  %V6 = load i32, i32* %V1
  %V7 = load i32, i32* %V2
  %V8 = icmp slt i32 %V6, %V7
  br i1 %V8, label %b3, label %b4
b3:
  %V9 = load i32, i32* %V1
  %V10 = load i32, i32* %V2
  %V11 = sub i32 %V9, %V10
  ret i32 %V11
b4:
  %V12 = load i32, i32* %V1
  %V13 = load i32, i32* %V2
  %V14 = icmp eq i32 %V12, %V13
  br i1 %V14, label %b6, label %b7
b6:
  ret i32 0
b7:
  br label %b5
b5:
  br label %b8
b2:
  %V15 = load i32, i32* %V1
  %V16 = load i32, i32* %V2
  %V17 = icmp sge i32 %V15, %V16
  br i1 %V17, label %b9, label %b10
b9:
  %V18 = load i32, i32* %V1
  %V19 = load i32, i32* %V2
  %V20 = icmp sgt i32 %V18, %V19
  br i1 %V20, label %b11, label %b12
b11:
  %V21 = load i32, i32* %V1
  %V22 = load i32, i32* %V2
  %V23 = sub i32 %V21, %V22
  ret i32 %V23
b12:
  %V24 = load i32, i32* %V1
  %V25 = load i32, i32* %V2
  %V26 = icmp eq i32 %V24, %V25
  br i1 %V26, label %b14, label %b15
b14:
  ret i32 0
b15:
  br label %b13
b13:
  br label %b10
b10:
  br label %b8
b8:
  ret i32 0
}
define dso_local void @F_printArr (i32* %P_0){
b0:
  %V1 = alloca i32*
  store i32* %P_0 , i32** %V1
  %V2 = alloca i32
  store i32 0 , i32* %V2
  br label %b1
b1:
  %V3 = load i32, i32* %V2
  %V4 = icmp slt i32 %V3, 2
  br i1 %V4, label %b2, label %b4
b2:
  %V5 = load i32, i32* %V2
  %V6 = load i32*, i32** %V1
  %V7 = getelementptr inbounds i32,i32* %V6, i32 %V5
  %V8 = load i32, i32* %V7
  call void @putstr(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str_0, i32 0, i32 0))
  call void @putint(i32 %V8)
  %V9 = load i32, i32* %V2
  %V10 = add i32 %V9, 1
  store i32 %V10 , i32* %V2
  br label %b3
b3:
  br label %b1
b4:
  call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_1, i32 0, i32 0))
  ret void
}
define dso_local void @F_printArr2 ([2 x i32]* %P_0){
b0:
  %V1 = alloca [2 x i32]*
  store [2 x i32]* %P_0 , [2 x i32]** %V1
  %V2 = alloca i32
  store i32 0 , i32* %V2
  br label %b1
b1:
  %V3 = load i32, i32* %V2
  %V4 = icmp slt i32 %V3, 4
  br i1 %V4, label %b2, label %b4
b2:
  %V5 = load i32, i32* %V2
  %V6 = load [2 x i32]*, [2 x i32]** %V1
  %V7 = getelementptr inbounds [2 x i32],[2 x i32]* %V6, i32 %V5
  %V8 = getelementptr inbounds [2 x i32], [2 x i32]* %V7,  i32 0 ,i32 0
  call void @F_printArr (i32* %V8)
  %V10 = load i32, i32* %V2
  %V11 = add i32 %V10, 1
  store i32 %V11 , i32* %V2
  br label %b3
b3:
  br label %b1
b4:
  ret void
}
define dso_local void @F_printHello (){
b0:
  %V1 = alloca i32
  %V2 = call i32 @getint()
  store i32 %V2 , i32* %V1
  %V3 = load i32, i32* %V1
  call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str_2, i32 0, i32 0))
  call void @putint(i32 %V3)
  call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_3, i32 0, i32 0))
  ret void
}
define dso_local i32 @F_add (i32 %P_0){
b0:
  %V1 = alloca i32
  store i32 %P_0 , i32* %V1
  %V2 = alloca i32
  %V3 = load i32, i32* %V1
  %V4 = add i32 %V3, 3
  store i32 %V4 , i32* %V2
  %V5 = load i32, i32* %V2
  ret i32 %V5
}
define dso_local void @F_opp (){
b0:
  ret void
}
define dso_local i32 @main() {
b0:
  %V1 = alloca i32
  store i32 3 , i32* %V1
  %V2 = alloca i32
  store i32 0 , i32* %V2
  %V3 = alloca i32
  store i32 1 , i32* %V3
  %V4 = load i32, i32* %V3
  %V5 = icmp eq i32 %V4, 0
  br i1 %V5, label %b1, label %b2
b1:
  store i32 0 , i32* %V3
  br label %b2
b2:
  store i32 1 , i32* %V3
  store i32 -1 , i32* %V3
  %V6 = alloca i32
  %V7 = load i32, i32* %V2
  %V8 = add i32 %V7, 1
  %V9 = sdiv i32 18, %V8
  %V10 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @G_next,  i32 0 ,i32 0
  %V11 = getelementptr inbounds [2 x i32], [2 x i32]* %V10,  i32 0 ,i32 0
  %V12 = load i32, i32* %V11
  %V13 = sub i32 %V9, 14
  %V14 = add i32 %V13, %V12
  store i32 %V14 , i32* %V6
  br label %b3
b3:
  %V15 = load i32, i32* %V2
  %V16 = icmp sle i32 %V15, 5
  br i1 %V16, label %b4, label %b6
b4:
  %V17 = load i32, i32* %V2
  %V18 = icmp eq i32 %V17, 3
  br i1 %V18, label %b7, label %b8
b7:
  %V19 = load i32, i32* %V2
  %V20 = add i32 %V19, 1
  store i32 %V20 , i32* %V2
  br label %b5
b8:
  %V21 = load i32, i32* %V2
  %V22 = icmp eq i32 %V21, 5
  br i1 %V22, label %b9, label %b10
b9:
  br label %b6
b10:
  %V23 = alloca i32
  %V24 = load i32, i32* %V2
  store i32 %V24 , i32* %V23
  br label %b11
b11:
  %V25 = load i32, i32* %V2
  %V26 = add i32 %V25, 1
  store i32 %V26 , i32* %V2
  br label %b5
b5:
  br label %b3
b6:
  %V27 = call i32 @getint()
  store i32 %V27 , i32* %V1
  %V28 = load i32, i32* %V1
  %V29 = call i32 @F_add (i32 %V28)
  call void @putstr(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str_4, i32 0, i32 0))
  call void @putint(i32 %V29)
  call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_5, i32 0, i32 0))
  %V30 = call i32 @F_getDif3N (i32 1 , i32 999)
  store i32 %V30 , i32* %V1
  %V31 = load i32, i32* %V1
  call void @putstr(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @str_6, i32 0, i32 0))
  call void @putint(i32 %V31)
  call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_7, i32 0, i32 0))
  %V32 = call i32 @F_judgeB (i32 2 , i32 3)
  store i32 %V32 , i32* %V1
  %V33 = load i32, i32* %V1
  call void @putstr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str_8, i32 0, i32 0))
  call void @putint(i32 %V33)
  call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str_9, i32 0, i32 0))
  call void @F_printHello ()
  %V35 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @G_next,  i32 0 ,i32 0
  call void @F_printArr2 ([2 x i32]* %V35)
  %V37 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @G_next,  i32 0 ,i32 0
  %V38 = getelementptr inbounds [2 x i32], [2 x i32]* %V37,  i32 0 ,i32 0
  call void @F_printArr (i32* %V38)
  %V40 = getelementptr inbounds [2 x i32], [2 x i32]* @G_arr,  i32 0 ,i32 0
  call void @F_printArr (i32* %V40)
  ret i32 0
}

